/* ===== Mode switch (Planning/Survey) ===== */
let appMode = 'planning';
const appPlanning = document.getElementById('appPlanning');
const appSurvey   = document.getElementById('appSurvey');
const pillPlanning= document.getElementById('pillPlanning');
const pillSurvey  = document.getElementById('pillSurvey');

function setModeApp(mode){
  appMode = mode;
  if(mode==='planning'){
    appPlanning.style.display='grid'; appSurvey.style.display='none';
    pillPlanning.classList.add('active'); pillSurvey.classList.remove('active');
  }else{
    appPlanning.style.display='none'; appSurvey.style.display='grid';
    pillPlanning.classList.remove('active'); pillSurvey.classList.add('active');
  }
}
pillPlanning.onclick=()=>setModeApp('planning');
pillSurvey.onclick  =()=>setModeApp('survey');

/* ===== Constants ===== */
const RSSI_MIN=-80, RSSI_MAX=-50;
const P_GRAY=-67, P_YELLOW=-60, P_GREEN=-30;
const GRAY_BASE=[128,128,128], GRAY_LIGHT=[220,220,220];
const N_BY_BAND={'2.4':2.2,'5':2.5};
const CONTOUR_LEVELS=[-20,-25,-30,-35,-40,-45,-50,-55,-60,-65,-70,-75,-80];

const $=s=>document.querySelector(s);
const clamp=(v,a,b)=>Math.max(a,Math.min(b,v));
const dist=(a,b)=>Math.hypot(a.x-b.x,a.y-b.y);
const lerp=(a,b,t)=>a+(b-a)*t;
const mix=(c1,c2,t)=>[Math.round(lerp(c1[0],c2[0],t)),Math.round(lerp(c1[1],c2[1],t)),Math.round(lerp(c1[2],c2[2],t))];
const rgbStr=([r,g,b])=>`rgb(${r},${g},${b})`;

/* ===== Materials ===== */
const MATERIALS={
  drywall:{name:'ผนังยิปซัม (Drywall)',color:'#98c1ff',att:{'2.4':3, '5':4}},
  glass:{name:'กระจก',color:'#7de1ff',att:{'2.4':4, '5':6}},
  wood:{name:'ไม้',color:'#9ae27b',att:{'2.4':5, '5':7}},
  brick:{name:'อิฐ/คอนกรีตมวลเบา',color:'#ffb673',att:{'2.4':8, '5':10}},
  concrete:{name:'คอนกรีตเสริมเหล็ก',color:'#ff8f8f',att:{'2.4':12,'5':15}},
  metal:{name:'โลหะแผ่น/ประตูเหล็ก',color:'#ffd36a',att:{'2.4':20,'5':24}},
  human:{name:'ร่างกายคน (เฉลี่ย)',color:'#d6b3ff',att:{'2.4':3, '5':4}}
};

(function fillMat(){
  const sel=$('#matType');
  Object.keys(MATERIALS).forEach(k=>{
    const o=document.createElement('option');
    o.value=k; o.textContent=MATERIALS[k].name; sel.appendChild(o);
  });
  sel.value='brick';
  $('#matAtt').value=MATERIALS['brick'].att['2.4'];
  sel.addEventListener('change',()=>$('#matAtt').value=MATERIALS[sel.value].att['2.4']);
})();

/* ===== Canvas, transform ===== */
const canvas=$('#canvas'), ctx=canvas.getContext('2d',{willReadFrequently:true});
const overlay=$('#overlay'), octx=overlay.getContext('2d',{willReadFrequently:true});
const stage=$('#stage');
let floorImg=null, worldW=1280, worldH=800;
let view={scale:1,tx:0,ty:0,min:0.2,max:6};

function setView(s,tx,ty){ view.scale=clamp(s,view.min,view.max); view.tx=tx; view.ty=ty; drawAll(); }
function resetView(){
  const pad=20, sx=(canvas.width-2*pad)/worldW, sy=(canvas.height-2*pad)/worldH, s=Math.min(sx,sy);
  setView(s,pad,pad);
}
function worldToScreen(p){return {x:p.x*view.scale+view.tx,y:p.y*view.scale+view.ty};}
function screenToWorld(p){return {x:(p.x-view.tx)/view.scale,y:(p.y-view.ty)/view.scale};}
function getCanvasPos(e){const r=canvas.getBoundingClientRect();const sx=e.clientX-r.left,sy=e.clientY-r.top;return {screen:{x:sx,y:sy},world:screenToWorld({x:sx,y:sy}),rect:r};}

/* ===== State ===== */
let aps=[], segments=[];
let mode='idle', dragging=false, dragStart=null;
let spacePan=false, panAnchor=null;
let scalePxPerMeter=null, hasRendered=false;
let heatCanvas=null, heatField=null;

/* ===== Wheel Zoom (ใช้ได้ทั้ง planning/survey) ===== */
function zoomAt(cx,cy,f){
  const old=view.scale, ns=clamp(old*f,view.min,view.max); if(ns===old) return;
  const wx=(cx-view.tx)/old, wy=(cy-view.ty)/old;
  const ntx=cx-wx*ns, nty=cy-wy*ns;
  setView(ns,ntx,nty);
}
canvas.addEventListener('wheel',e=>{
  e.preventDefault();
  const r=canvas.getBoundingClientRect(),cx=e.clientX-r.left,cy=e.clientY-r.top;
  zoomAt(cx,cy,e.deltaY<0?1.12:0.9);
},{passive:false});

/* ===== Pan (ใช้ได้ทั้ง planning/survey) ===== */
document.addEventListener('keydown',e=>{if(e.code==='Space')spacePan=true;if(e.key==='Escape'){mode='idle';$('#modeBadge').textContent='โหมด: Idle';hideProbe();}});
document.addEventListener('keyup',e=>{if(e.code==='Space')spacePan=false;});

canvas.addEventListener('mousedown',e=>{
  const {screen,world}=getCanvasPos(e);
  if(spacePan||e.button===1){panAnchor={x:screen.x,y:screen.y,tx:view.tx,ty:view.ty};return;}
  if(mode==='scale'||mode==='mat')startDrag(world.x,world.y);
});
canvas.addEventListener('mousemove',e=>{
  const {screen,world}=getCanvasPos(e);
  if(panAnchor){const dx=screen.x-panAnchor.x,dy=screen.y-panAnchor.y;setView(view.scale,panAnchor.tx+dx,panAnchor.ty+dy);return;}
  if(mode==='scale'||mode==='mat')updateDrag(world.x,world.y);
});
canvas.addEventListener('mouseup',e=>{
  if(panAnchor){panAnchor=null;return;}
  const {world}=getCanvasPos(e);
  if(mode==='scale'||mode==='mat')endDrag(world.x,world.y);
});
canvas.addEventListener('mouseleave',()=>{panAnchor=null;dragging=false;dragStart=null;clearOverlay();});

/* ===== Drag / Scale / Mat เหมือนเดิม ===== */
function drawArrowWorld(a,b,opts={}){ /* ...เหมือนของคุณเดิมทั้งหมด... */ }
/* ===== endDrag, startDrag, updateDrag ... (เหมือนเดิม) ===== */

/* ===== Click: วาง AP / Probe (ทุกโหมด) ===== */
canvas.addEventListener('click',e=>{
  if(panAnchor)return;
  const {world,screen}=getCanvasPos(e);
  if(mode==='ap'){
    if(!scalePxPerMeter){scalePxPerMeter=100;$('#scaleLabel').textContent='100 px/เมตร (อัตโนมัติ)';}
    const label=$('#apLabel').value.trim()||`AP-${aps.length+1}`;
    const p0=parseFloat($('#apP0').value||'-40');
    const band=$('#apBand').value||'5';
    const preset=window.__currentApPreset?{presetName:window.__currentApPreset.name}:undefined;
    aps.push({x:world.x,y:world.y,label,p0,band,preset});
    drawAll();refreshAPList();
    return;
  }
  if(mode==='idle'){ if(!hasRendered)return; showProbeAtScreen(screen.x,screen.y,world.x,world.y); }
});

/* ===== Keyboard shortcuts (ทุกโหมด) ===== */
document.addEventListener('keydown',e=>{
  if(e.key==='s'||e.key==='S'){mode='scale';$('#modeBadge').textContent='โหมด: ตั้งสเกล';hideProbe();}
  if(e.key==='a'||e.key==='A'){mode='ap';$('#modeBadge').textContent='โหมด: วาง AP (คลิก)';hideProbe();}
  if(e.key==='w'||e.key==='W'){mode='mat';$('#modeBadge').textContent='โหมด: วัสดุ (ลากเส้น)';hideProbe();}
  if(e.key==='h'||e.key==='H'){renderHeatmap();hideProbe();}
  if(e.key==='Escape'){mode='idle';$('#modeBadge').textContent='โหมด: Idle';hideProbe();}
});

/* ===== ฟังก์ชันเดิมทั้งหมดของคุณ (drawBase, drawPermanent, renderHeatmap, rssiFromAPs, refreshAPList, refreshMatList ฯลฯ) ===== */
/* ...คงไว้เหมือนเดิมทุกอย่าง... */

/* ===== SURVEY MODE: ใช้ canvas/view/state เดียวกัน ===== */
/* ...โค้ด survey เดิมทั้งหมดของคุณ... (ไม่ต้องแก้อะไรเพิ่มเติม) ... */

console.log('✅ Survey mode updated: now identical to Planning mode.');
